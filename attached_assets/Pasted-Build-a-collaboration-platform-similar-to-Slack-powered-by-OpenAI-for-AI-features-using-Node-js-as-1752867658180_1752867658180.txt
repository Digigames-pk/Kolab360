Build a collaboration platform similar to Slack, powered by OpenAI for AI features, using Node.js as the backend with Express.js for the server, Socket.io for real-time messaging, and Replit Database (the built-in key-value store) for data storage. Use React.js for the frontend. The app should support user authentication, workspaces, channels (public/private), direct messaging, file sharing, and threaded replies. Integrate Resend.com for email management, such as sending invite links, notifications, and verification emails.

Core features like Slack:

User registration/login with JWT authentication, including email verification via Resend.com.
Create/join workspaces with invite links sent via Resend.com emails.
Channels for group chats, with message history persistence in Replit DB.
Real-time typing indicators, message editing/deletion, and reactions (emojis).
Search functionality for messages across channels.
Notifications (in-app via WebSockets and email via Resend.com for offline users).
Unique and incredible AI-based features powered exclusively by OpenAI (using their API for GPT models, embeddings, etc.):

AI Smart Assistant Bot: An always-on bot in every channel that users can @mention. It uses OpenAI's GPT models to generate responses, summarize long threads (e.g., "/summarize last 50 messages"), generate action items from discussions, or answer queries based on conversation context.
Predictive AI Auto-Complete: Use OpenAI to predict and auto-generate full sentences or code snippets in messages. Include a "creativity slider" to adjust response novelty via temperature parameters in API calls.
Sentiment Analysis and Mood Booster: Real-time analysis of message sentiment using OpenAI (e.g., detect negativity and suggest positive rephrasings). If a conversation turns heated, auto-suggest icebreakers or fun AI-generated text-based memes/emojis (or images via DALL-E if enabled).
Multi-Language Real-Time Translation: Automatically detect and translate messages in channels with diverse users, using OpenAI for natural, context-aware translations. Support voice messages with AI transcription and translation via OpenAI's Whisper model.
AI-Powered Integrations Hub: A marketplace-like section where users can add "AI plugins" (e.g., connect to GitHub for code reviews via OpenAI, or Calendar for scheduling with natural language).
Personalized AI Avatars: Generate unique AI-driven avatars for users that evolve based on their interaction style (e.g., using DALL-E from OpenAI for image generation).
Proactive AI Insights: Daily/weekly AI-generated reports on workspace activity, like "Top trends: Team discussed project X 40% more this week â€“ here's a mind map summary" using graph visualization libraries like D3.js and OpenAI for content generation.
Privacy-Focused AI: All AI processing should be opt-in per user, with data anonymization, and an audit log for AI interactions stored in Replit DB.
Visual Task Management System: An integrated visual task board (Kanban-style) per workspace or channel, where tasks can be created manually or auto-generated by OpenAI from discussions (e.g., via the bot with "/generate-tasks" to extract and create tasks from recent messages). Users can view progress visually with drag-and-drop columns (e.g., To Do, In Progress, Done) using react-beautiful-dnd, assign users, set deadlines, and add descriptions/labels. Include progress visualizations like pie charts or burndown charts via react-chartjs-2. AI can analyze tasks for suggestions like priority ranking, estimated completion times, or automated status updates based on message sentiment/context.
Structure the project in Replit:

Folders: server (Node.js backend), client (React frontend), shared (for types/utils).
Use environment variables for API keys (e.g., OPENAI_API_KEY, RESEND_API_KEY).
For Replit DB: Access it via the '@replit/database' package (install via npm i @replit/database).
Integrate Resend.com: Use their Node.js SDK (npm i resend) for sending emails; handle templates for invites, notifications, etc.
For frontend visualizations: Install react-beautiful-dnd and react-chartjs-2 (via npm in the client folder).